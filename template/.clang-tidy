---
Checks:
  -*,
  # abseil-*,
  # altera-*,
  # android-*,
  # boost-*,
  # cert-*,
  # darwin-*,
  # fuchsia-*,
  # google-*,
  # hicpp-*,
  # linuxkernel-*,
  # llvm-*,
  # llvmlibc-*,
  # mpi-*,
  # objc-*,
  # openmp-*,
  # zircon-*,
  modernize-*,
  clang-analyzer-*,
  clang-diagnostic-*,
  concurrency-*,
  cppcoreguidelines-*,

  #
  # bugprone-*
  #
  # bugprone-argument-comment,
  # bugprone-assert-side-effect,
  # bugprone-assignment-in-if-condition,
  # bugprone-bad-signal-to-kill-thread,
  # bugprone-bitwise-pointer-cast,
  bugprone-bool-pointer-implicit-conversion,
  # bugprone-branch-clone,
  # bugprone-casting-through-void,
  # bugprone-chained-comparison,
  # bugprone-compare-pointer-to-member-virtual-function,
  # bugprone-copy-constructor-init,
  # bugprone-crtp-constructor-accessibility,
  # bugprone-dangling-handle,
  # bugprone-dynamic-static-initializers,
  # bugprone-easily-swappable-parameters,
  # bugprone-empty-catch,
  # bugprone-exception-escape,
  bugprone-fold-init-type,
  # bugprone-forward-declaration-namespace,
  # bugprone-forwarding-reference-overload,
  # bugprone-implicit-widening-of-multiplication-result,
  # bugprone-inaccurate-erase,
  # bugprone-inc-dec-in-conditions,
  # bugprone-incorrect-enable-if,
  # bugprone-incorrect-roundings,
  # bugprone-infinite-loop,
  # bugprone-integer-division,
  # bugprone-lambda-function-name,
  # bugprone-macro-parentheses,
  # bugprone-macro-repeated-side-effects,
  # bugprone-misplaced-operator-in-strlen-in-alloc,
  # bugprone-misplaced-pointer-arithmetic-in-alloc,
  # bugprone-misplaced-widening-cast,
  # bugprone-move-forwarding-reference,
  # bugprone-multi-level-implicit-pointer-conversion,
  # bugprone-multiple-new-in-one-expression,
  # bugprone-multiple-statement-macro,
  # bugprone-no-escape,
  # bugprone-non-zero-enum-to-bool-conversion,
  # bugprone-nondeterministic-pointer-iteration-order,
  # bugprone-not-null-terminated-result,
  # bugprone-optional-value-conversion,
  # bugprone-parent-virtual-call,
  # bugprone-pointer-arithmetic-on-polymorphic-object,
  # bugprone-posix-return,
  bugprone-redundant-branch-condition,
  # bugprone-reserved-identifier,
  # bugprone-return-const-ref-from-parameter,
  # bugprone-shared-ptr-array-mismatch,
  # bugprone-signal-handler,
  # bugprone-signed-char-misuse,
  # bugprone-sizeof-container,
  # bugprone-sizeof-expression,
  # bugprone-spuriously-wake-up-functions,
  # bugprone-standalone-empty,
  # bugprone-string-constructor,
  # bugprone-string-integer-assignment,
  # bugprone-string-literal-with-embedded-nul,
  # bugprone-stringview-nullptr,
  # bugprone-suspicious-enum-usage,
  # bugprone-suspicious-include,
  # bugprone-suspicious-memory-comparison,
  # bugprone-suspicious-memset-usage,
  # bugprone-suspicious-missing-comma,
  # bugprone-suspicious-realloc-usage,
  # bugprone-suspicious-semicolon,
  # bugprone-suspicious-string-compare,
  # bugprone-suspicious-stringview-data-usage,
  # bugprone-swapped-arguments,
  # bugprone-switch-missing-default-case,
  # bugprone-tagged-union-member-count,
  # bugprone-terminating-continue,
  # bugprone-throw-keyword-missing,
  # bugprone-too-small-loop-variable,
  # bugprone-unchecked-optional-access,
  # bugprone-undefined-memory-manipulation,
  # bugprone-undelegated-constructor,
  # bugprone-unhandled-exception-at-new,
  # bugprone-unhandled-self-assignment,
  # bugprone-unique-ptr-array-mismatch,
  # bugprone-unsafe-functions,
  # bugprone-unused-local-non-trivial-variable,
  bugprone-unused-raii,
  # bugprone-unused-return-value,
  bugprone-use-after-move,
  # bugprone-virtual-near-miss,



  # 
  # misc-*
  #
  misc-confusable-identifiers, # 容易混淆的标识符
  # misc-const-correctness,
  # misc-coroutine-hostile-raii,
  # misc-definitions-in-headers,
  # misc-header-include-cycle,
  # misc-include-cleaner,
  # misc-misleading-bidirectional,
  # misc-misleading-identifier,
  # misc-misplaced-const,
  # misc-new-delete-overloads,
  # misc-no-recursion,
  # misc-non-copyable-objects,
  # misc-non-private-member-variables-in-classes,
  misc-redundant-expression, # 冗余表达式
  misc-static-assert, # 静态断言
  # misc-throw-by-value-catch-by-reference,
  # misc-unconventional-assign-operator,
  # misc-uniqueptr-reset-release,
  misc-unused-alias-decls, # 未使用的别名声明
  misc-unused-parameters, # 未使用的参数
  misc-unused-using-decls, # 未使用的using声明
  # misc-use-anonymous-namespace,
  # misc-use-internal-linkage,


  # 
  # readability-*
  #
  # readability-avoid-const-params-in-decls,
  readability-avoid-nested-conditional-operator,
  readability-avoid-return-with-void-value,
  readability-avoid-unconditional-preprocessor-if,
  readability-braces-around-statements,
  readability-const-return-type,
  readability-container-contains,
  readability-container-data-pointer,
  readability-container-size-empty,
  # readability-convert-member-functions-to-static,
  readability-delete-null-pointer,
  readability-duplicate-include,
  # readability-else-after-return,
  readability-enum-initial-value,
  readability-function-cognitive-complexity,
  readability-function-size,
  # readability-identifier-length,
  readability-identifier-naming,
  # readability-implicit-bool-conversion,
  # readability-inconsistent-declaration-parameter-name,
  # readability-isolate-declaration,
  # readability-magic-numbers,
  readability-make-member-function-const,
  readability-math-missing-parentheses,
  readability-misleading-indentation,
  readability-misplaced-array-index,
  # readability-named-parameter,
  readability-non-const-parameter,
  readability-operators-representation,
  readability-qualified-auto,
  readability-redundant-access-specifiers,
  readability-redundant-casting,
  readability-redundant-control-flow,
  readability-redundant-declaration,
  readability-redundant-function-ptr-dereference,
  readability-redundant-inline-specifier,
  readability-redundant-member-init,
  readability-redundant-preprocessor,
  readability-redundant-smartptr-get,
  readability-redundant-string-cstr,
  readability-redundant-string-init,
  readability-reference-to-constructed-temporary,
  readability-simplify-boolean-expr,
  readability-simplify-subscript-expr,
  readability-static-accessed-through-instance,
  readability-static-definition-in-anonymous-namespace,
  readability-string-compare,
  readability-suspicious-call-argument,
  readability-uniqueptr-delete-release,
  readability-uppercase-literal-suffix,
  readability-use-anyofallof,
  readability-use-std-min-max,


  # 
  # protability-*
  #
  # portability-restrict-system-includes,
  portability-simd-intrinsics,
  # portability-std-allocator-const,
  # portability-template-virtual-member-function,


  # 
  # performance-*
  #
  # performance-avoid-endl,
  # performance-enum-size,
  performance-faster-string-find,
  # performance-for-range-copy,
  # performance-implicit-conversion-in-loop,
  performance-inefficient-algorithm,
  # performance-inefficient-string-concatenation,
  # performance-inefficient-vector-operation,
  performance-move-const-arg,
  # performance-move-constructor-init,
  # performance-no-automatic-move,
  # performance-no-int-to-ptr,
  # performance-noexcept-destructor,
  # performance-noexcept-move-constructor,
  # performance-noexcept-swap,
  # performance-trivially-destructible,
  performance-type-promotion-in-math-fn,
  # performance-unnecessary-copy-initialization,
  # performance-unnecessary-value-param,




WarningsAsErrors: "*"